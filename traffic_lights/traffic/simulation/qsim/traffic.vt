// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2021 12:42:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_vlg_sample_tst(
	CLK,
	EN,
	RST,
	sampler_tx
);
input  CLK;
input  EN;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or EN or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_vlg_check_tst (
	DX1,
	DX2,
	LIGHT,
	LIGHTA,
	NB1,
	NB2,
	sampler_rx
);
input [3:0] DX1;
input [3:0] DX2;
input [5:0] LIGHT;
input [5:0] LIGHTA;
input [3:0] NB1;
input [3:0] NB2;
input sampler_rx;

reg [3:0] DX1_expected;
reg [3:0] DX2_expected;
reg [5:0] LIGHT_expected;
reg [5:0] LIGHTA_expected;
reg [3:0] NB1_expected;
reg [3:0] NB2_expected;

reg [3:0] DX1_prev;
reg [3:0] DX2_prev;
reg [5:0] LIGHT_prev;
reg [5:0] LIGHTA_prev;
reg [3:0] NB1_prev;
reg [3:0] NB2_prev;

reg [3:0] DX1_expected_prev;
reg [3:0] DX2_expected_prev;
reg [5:0] LIGHT_expected_prev;
reg [5:0] LIGHTA_expected_prev;
reg [3:0] NB1_expected_prev;
reg [3:0] NB2_expected_prev;

reg [3:0] last_DX1_exp;
reg [3:0] last_DX2_exp;
reg [5:0] last_LIGHT_exp;
reg [5:0] last_LIGHTA_exp;
reg [3:0] last_NB1_exp;
reg [3:0] last_NB2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	DX1_prev = DX1;
	DX2_prev = DX2;
	LIGHT_prev = LIGHT;
	LIGHTA_prev = LIGHTA;
	NB1_prev = NB1;
	NB2_prev = NB2;
end

// update expected /o prevs

always @(trigger)
begin
	DX1_expected_prev = DX1_expected;
	DX2_expected_prev = DX2_expected;
	LIGHT_expected_prev = LIGHT_expected;
	LIGHTA_expected_prev = LIGHTA_expected;
	NB1_expected_prev = NB1_expected;
	NB2_expected_prev = NB2_expected;
end


// expected DX1[ 3 ]
initial
begin
	DX1_expected[3] = 1'bX;
end 
// expected DX1[ 2 ]
initial
begin
	DX1_expected[2] = 1'bX;
end 
// expected DX1[ 1 ]
initial
begin
	DX1_expected[1] = 1'bX;
end 
// expected DX1[ 0 ]
initial
begin
	DX1_expected[0] = 1'bX;
end 
// expected DX2[ 3 ]
initial
begin
	DX2_expected[3] = 1'bX;
end 
// expected DX2[ 2 ]
initial
begin
	DX2_expected[2] = 1'bX;
end 
// expected DX2[ 1 ]
initial
begin
	DX2_expected[1] = 1'bX;
end 
// expected DX2[ 0 ]
initial
begin
	DX2_expected[0] = 1'bX;
end 
// expected LIGHT[ 5 ]
initial
begin
	LIGHT_expected[5] = 1'bX;
end 
// expected LIGHT[ 4 ]
initial
begin
	LIGHT_expected[4] = 1'bX;
end 
// expected LIGHT[ 3 ]
initial
begin
	LIGHT_expected[3] = 1'bX;
end 
// expected LIGHT[ 2 ]
initial
begin
	LIGHT_expected[2] = 1'bX;
end 
// expected LIGHT[ 1 ]
initial
begin
	LIGHT_expected[1] = 1'bX;
end 
// expected LIGHT[ 0 ]
initial
begin
	LIGHT_expected[0] = 1'bX;
end 
// expected LIGHTA[ 5 ]
initial
begin
	LIGHTA_expected[5] = 1'bX;
end 
// expected LIGHTA[ 4 ]
initial
begin
	LIGHTA_expected[4] = 1'bX;
end 
// expected LIGHTA[ 3 ]
initial
begin
	LIGHTA_expected[3] = 1'bX;
end 
// expected LIGHTA[ 2 ]
initial
begin
	LIGHTA_expected[2] = 1'bX;
end 
// expected LIGHTA[ 1 ]
initial
begin
	LIGHTA_expected[1] = 1'bX;
end 
// expected LIGHTA[ 0 ]
initial
begin
	LIGHTA_expected[0] = 1'bX;
end 
// expected NB1[ 3 ]
initial
begin
	NB1_expected[3] = 1'bX;
end 
// expected NB1[ 2 ]
initial
begin
	NB1_expected[2] = 1'bX;
end 
// expected NB1[ 1 ]
initial
begin
	NB1_expected[1] = 1'bX;
end 
// expected NB1[ 0 ]
initial
begin
	NB1_expected[0] = 1'bX;
end 
// expected NB2[ 3 ]
initial
begin
	NB2_expected[3] = 1'bX;
end 
// expected NB2[ 2 ]
initial
begin
	NB2_expected[2] = 1'bX;
end 
// expected NB2[ 1 ]
initial
begin
	NB2_expected[1] = 1'bX;
end 
// expected NB2[ 0 ]
initial
begin
	NB2_expected[0] = 1'bX;
end 
// generate trigger
always @(DX1_expected or DX1 or DX2_expected or DX2 or LIGHT_expected or LIGHT or LIGHTA_expected or LIGHTA or NB1_expected or NB1 or NB2_expected or NB2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DX1 = %b | expected DX2 = %b | expected LIGHT = %b | expected LIGHTA = %b | expected NB1 = %b | expected NB2 = %b | ",DX1_expected_prev,DX2_expected_prev,LIGHT_expected_prev,LIGHTA_expected_prev,NB1_expected_prev,NB2_expected_prev);
	$display("| real DX1 = %b | real DX2 = %b | real LIGHT = %b | real LIGHTA = %b | real NB1 = %b | real NB2 = %b | ",DX1_prev,DX2_prev,LIGHT_prev,LIGHTA_prev,NB1_prev,NB2_prev);
`endif
	if (
		( DX1_expected_prev[0] !== 1'bx ) && ( DX1_prev[0] !== DX1_expected_prev[0] )
		&& ((DX1_expected_prev[0] !== last_DX1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX1_expected_prev);
		$display ("     Real value = %b", DX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DX1_exp[0] = DX1_expected_prev[0];
	end
	if (
		( DX1_expected_prev[1] !== 1'bx ) && ( DX1_prev[1] !== DX1_expected_prev[1] )
		&& ((DX1_expected_prev[1] !== last_DX1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX1_expected_prev);
		$display ("     Real value = %b", DX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DX1_exp[1] = DX1_expected_prev[1];
	end
	if (
		( DX1_expected_prev[2] !== 1'bx ) && ( DX1_prev[2] !== DX1_expected_prev[2] )
		&& ((DX1_expected_prev[2] !== last_DX1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX1_expected_prev);
		$display ("     Real value = %b", DX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DX1_exp[2] = DX1_expected_prev[2];
	end
	if (
		( DX1_expected_prev[3] !== 1'bx ) && ( DX1_prev[3] !== DX1_expected_prev[3] )
		&& ((DX1_expected_prev[3] !== last_DX1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX1_expected_prev);
		$display ("     Real value = %b", DX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DX1_exp[3] = DX1_expected_prev[3];
	end
	if (
		( DX2_expected_prev[0] !== 1'bx ) && ( DX2_prev[0] !== DX2_expected_prev[0] )
		&& ((DX2_expected_prev[0] !== last_DX2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX2_expected_prev);
		$display ("     Real value = %b", DX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DX2_exp[0] = DX2_expected_prev[0];
	end
	if (
		( DX2_expected_prev[1] !== 1'bx ) && ( DX2_prev[1] !== DX2_expected_prev[1] )
		&& ((DX2_expected_prev[1] !== last_DX2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX2_expected_prev);
		$display ("     Real value = %b", DX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DX2_exp[1] = DX2_expected_prev[1];
	end
	if (
		( DX2_expected_prev[2] !== 1'bx ) && ( DX2_prev[2] !== DX2_expected_prev[2] )
		&& ((DX2_expected_prev[2] !== last_DX2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX2_expected_prev);
		$display ("     Real value = %b", DX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DX2_exp[2] = DX2_expected_prev[2];
	end
	if (
		( DX2_expected_prev[3] !== 1'bx ) && ( DX2_prev[3] !== DX2_expected_prev[3] )
		&& ((DX2_expected_prev[3] !== last_DX2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DX2_expected_prev);
		$display ("     Real value = %b", DX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DX2_exp[3] = DX2_expected_prev[3];
	end
	if (
		( LIGHT_expected_prev[0] !== 1'bx ) && ( LIGHT_prev[0] !== LIGHT_expected_prev[0] )
		&& ((LIGHT_expected_prev[0] !== last_LIGHT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHT_expected_prev);
		$display ("     Real value = %b", LIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LIGHT_exp[0] = LIGHT_expected_prev[0];
	end
	if (
		( LIGHT_expected_prev[1] !== 1'bx ) && ( LIGHT_prev[1] !== LIGHT_expected_prev[1] )
		&& ((LIGHT_expected_prev[1] !== last_LIGHT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHT_expected_prev);
		$display ("     Real value = %b", LIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LIGHT_exp[1] = LIGHT_expected_prev[1];
	end
	if (
		( LIGHT_expected_prev[2] !== 1'bx ) && ( LIGHT_prev[2] !== LIGHT_expected_prev[2] )
		&& ((LIGHT_expected_prev[2] !== last_LIGHT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHT_expected_prev);
		$display ("     Real value = %b", LIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LIGHT_exp[2] = LIGHT_expected_prev[2];
	end
	if (
		( LIGHT_expected_prev[3] !== 1'bx ) && ( LIGHT_prev[3] !== LIGHT_expected_prev[3] )
		&& ((LIGHT_expected_prev[3] !== last_LIGHT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHT_expected_prev);
		$display ("     Real value = %b", LIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LIGHT_exp[3] = LIGHT_expected_prev[3];
	end
	if (
		( LIGHT_expected_prev[4] !== 1'bx ) && ( LIGHT_prev[4] !== LIGHT_expected_prev[4] )
		&& ((LIGHT_expected_prev[4] !== last_LIGHT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHT_expected_prev);
		$display ("     Real value = %b", LIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LIGHT_exp[4] = LIGHT_expected_prev[4];
	end
	if (
		( LIGHT_expected_prev[5] !== 1'bx ) && ( LIGHT_prev[5] !== LIGHT_expected_prev[5] )
		&& ((LIGHT_expected_prev[5] !== last_LIGHT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHT_expected_prev);
		$display ("     Real value = %b", LIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LIGHT_exp[5] = LIGHT_expected_prev[5];
	end
	if (
		( LIGHTA_expected_prev[0] !== 1'bx ) && ( LIGHTA_prev[0] !== LIGHTA_expected_prev[0] )
		&& ((LIGHTA_expected_prev[0] !== last_LIGHTA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHTA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHTA_expected_prev);
		$display ("     Real value = %b", LIGHTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LIGHTA_exp[0] = LIGHTA_expected_prev[0];
	end
	if (
		( LIGHTA_expected_prev[1] !== 1'bx ) && ( LIGHTA_prev[1] !== LIGHTA_expected_prev[1] )
		&& ((LIGHTA_expected_prev[1] !== last_LIGHTA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHTA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHTA_expected_prev);
		$display ("     Real value = %b", LIGHTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LIGHTA_exp[1] = LIGHTA_expected_prev[1];
	end
	if (
		( LIGHTA_expected_prev[2] !== 1'bx ) && ( LIGHTA_prev[2] !== LIGHTA_expected_prev[2] )
		&& ((LIGHTA_expected_prev[2] !== last_LIGHTA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHTA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHTA_expected_prev);
		$display ("     Real value = %b", LIGHTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LIGHTA_exp[2] = LIGHTA_expected_prev[2];
	end
	if (
		( LIGHTA_expected_prev[3] !== 1'bx ) && ( LIGHTA_prev[3] !== LIGHTA_expected_prev[3] )
		&& ((LIGHTA_expected_prev[3] !== last_LIGHTA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHTA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHTA_expected_prev);
		$display ("     Real value = %b", LIGHTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LIGHTA_exp[3] = LIGHTA_expected_prev[3];
	end
	if (
		( LIGHTA_expected_prev[4] !== 1'bx ) && ( LIGHTA_prev[4] !== LIGHTA_expected_prev[4] )
		&& ((LIGHTA_expected_prev[4] !== last_LIGHTA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHTA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHTA_expected_prev);
		$display ("     Real value = %b", LIGHTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LIGHTA_exp[4] = LIGHTA_expected_prev[4];
	end
	if (
		( LIGHTA_expected_prev[5] !== 1'bx ) && ( LIGHTA_prev[5] !== LIGHTA_expected_prev[5] )
		&& ((LIGHTA_expected_prev[5] !== last_LIGHTA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LIGHTA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LIGHTA_expected_prev);
		$display ("     Real value = %b", LIGHTA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LIGHTA_exp[5] = LIGHTA_expected_prev[5];
	end
	if (
		( NB1_expected_prev[0] !== 1'bx ) && ( NB1_prev[0] !== NB1_expected_prev[0] )
		&& ((NB1_expected_prev[0] !== last_NB1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB1_expected_prev);
		$display ("     Real value = %b", NB1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NB1_exp[0] = NB1_expected_prev[0];
	end
	if (
		( NB1_expected_prev[1] !== 1'bx ) && ( NB1_prev[1] !== NB1_expected_prev[1] )
		&& ((NB1_expected_prev[1] !== last_NB1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB1_expected_prev);
		$display ("     Real value = %b", NB1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NB1_exp[1] = NB1_expected_prev[1];
	end
	if (
		( NB1_expected_prev[2] !== 1'bx ) && ( NB1_prev[2] !== NB1_expected_prev[2] )
		&& ((NB1_expected_prev[2] !== last_NB1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB1_expected_prev);
		$display ("     Real value = %b", NB1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NB1_exp[2] = NB1_expected_prev[2];
	end
	if (
		( NB1_expected_prev[3] !== 1'bx ) && ( NB1_prev[3] !== NB1_expected_prev[3] )
		&& ((NB1_expected_prev[3] !== last_NB1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB1_expected_prev);
		$display ("     Real value = %b", NB1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NB1_exp[3] = NB1_expected_prev[3];
	end
	if (
		( NB2_expected_prev[0] !== 1'bx ) && ( NB2_prev[0] !== NB2_expected_prev[0] )
		&& ((NB2_expected_prev[0] !== last_NB2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB2_expected_prev);
		$display ("     Real value = %b", NB2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_NB2_exp[0] = NB2_expected_prev[0];
	end
	if (
		( NB2_expected_prev[1] !== 1'bx ) && ( NB2_prev[1] !== NB2_expected_prev[1] )
		&& ((NB2_expected_prev[1] !== last_NB2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB2_expected_prev);
		$display ("     Real value = %b", NB2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_NB2_exp[1] = NB2_expected_prev[1];
	end
	if (
		( NB2_expected_prev[2] !== 1'bx ) && ( NB2_prev[2] !== NB2_expected_prev[2] )
		&& ((NB2_expected_prev[2] !== last_NB2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB2_expected_prev);
		$display ("     Real value = %b", NB2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_NB2_exp[2] = NB2_expected_prev[2];
	end
	if (
		( NB2_expected_prev[3] !== 1'bx ) && ( NB2_prev[3] !== NB2_expected_prev[3] )
		&& ((NB2_expected_prev[3] !== last_NB2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NB2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NB2_expected_prev);
		$display ("     Real value = %b", NB2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_NB2_exp[3] = NB2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EN;
reg RST;
// wires                                               
wire [3:0] DX1;
wire [3:0] DX2;
wire [5:0] LIGHT;
wire [5:0] LIGHTA;
wire [3:0] NB1;
wire [3:0] NB2;

wire sampler;                             

// assign statements (if any)                          
traffic i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DX1(DX1),
	.DX2(DX2),
	.EN(EN),
	.LIGHT(LIGHT),
	.LIGHTA(LIGHTA),
	.NB1(NB1),
	.NB2(NB2),
	.RST(RST)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RST
initial
begin
	RST = 1'b1;
end 

// EN
initial
begin
	EN = 1'b1;
end 

traffic_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.EN(EN),
	.RST(RST),
	.sampler_tx(sampler)
);

traffic_vlg_check_tst tb_out(
	.DX1(DX1),
	.DX2(DX2),
	.LIGHT(LIGHT),
	.LIGHTA(LIGHTA),
	.NB1(NB1),
	.NB2(NB2),
	.sampler_rx(sampler)
);
endmodule

